
Финальное задание: программа-шагомер для фитнес-трекера
Вам подвернулся подходящий случай применить полученные знания на практике.
Знаменитая фирма "Unicorn" разработала новый фитнес-трекер "runaway", и вас пригласили написать программный модуль для этого гаджета — ведь за время обучения вы накопили достаточный опыт в работе с подобными устройствами и у вас даже есть фрагменты готового кода.
Заказчик составил техническое задание, которому вы должны следовать для успешного выполнения проекта.
Техническое задание
Программный модуль для обработки данных фитнес-трекера "runaway" фирмы "Unicorn".
Общее описание
Задача модуля:
получить и проверить входящие пакеты данных вида package = (<time>, <steps>) — например, package = ('9:36:02', 15000);
сохранить и обработать эти данные в модуле;
вывести в терминал сводку за период с начала суток до времени, переданного в пакете данных;
Формат сводки:
Время: <time из полученного пакета данных>.
Количество шагов за сегодня: <сумма шагов, сделанных с начала текущих суток>.
Дистанция составила <сумма шагов с начала текущих суток, конвертированная в км> км.
Вы сожгли <количество килокалорий, истраченных с начала текущих суток> ккал.
<Мотивирующее сообщение в зависимости от результатов> 
Список мотивирующих сообщений в зависимости от дистанции, пройденной пользователем:
От 6.5 км и более: 'Отличный результат! Цель достигнута.'
От 3.9 км и более: 'Неплохо! День был продуктивным.'
От 2 км и более: 'Маловато, но завтра наверстаем!'
Менее 2 км: 'Лежать тоже полезно. Главное — участие, а не победа!' 
вернуть сохранённые данные для обработки в других приложениях.
Входящие данные
Модуль получает от микросхемы-контроллера пакеты данных в виде кортежей.
Пакеты передаются в программу в момент обращения к трекеру (при нажатии на кнопку).
Порядок значений в пакете данных:
(<time>, <steps>)
<time>: время создания пакета; значение типа str; формат: 'часы:минуты:секунды'.
<steps>: количество шагов, сделанных пользователем с момента последнего обращения; значение типа int.
При передаче пакетов могут случаться сбои, это надо учесть в программе. При поступлении пакета нужно проверить его; передавать пакет на обработку можно только после проверки.
Возможные ошибки при получении пакетов:
Пакет меньшей или большей длины.
Один или несколько параметров в пакете имеют пустое значение.
Значение времени в переданном пакете меньше или равно предыдущему записанному значению (время считается в рамках одних суток).
Результат выполнения программы
Полученные пакеты должны быть сохранены в словаре storage_data. Ключами для него будут значения времени, а значениями — количество шагов.
В терминал должно быть выведено сообщение, например, такое:
Время: 09:36:02.
Количество шагов за сегодня: 15302.
Дистанция составила 9.95 км.
Вы сожгли 1512.00 ккал.
Отличный результат! Цель достигнута. 
Программа должна вернуть словарь storage_data, чтобы можно было продолжить обработку данных в других программах.
Детали реализации
Писать модуль с чистого листа не придётся: у вас есть шаблон с константами и разбиением на функции.
Вам предстоит написать тело для объявленных функций и определить места для их вызова.
Одной функции не хватает, вам нужно написать её полностью. Она должна называться show_message(). На вход эта функция должна получать все значения, которые требуются для вывода информационного сообщения: (время обращения, количество шагов, дистанцию, потраченные калории, достижение); на основе этих значений функция должна создать сообщение и напечатать его в терминале.
Точка входа в программу
Функция обработки пакетов accept_package() — это точка входа в программу, функция, которая вызывается первой; на вход она принимает пакет с данными. Функция accept_package() должна вернуть словарь storage_data, в который добавлены данные из полученного пакета.
Из этой функции по цепочке вызываются другие функции, каждая из которых отвечает за свою часть работы. Сразу после старта должна выполниться функция check_correct_data(), проверяющая корректность полученного пакета. Она может вернуть True или False, что повлияет на дальнейшее выполнение базовой функции.
Вызываемые функции должны быть размещены выше в коде, чем их вызов: Python читает код сверху вниз; сначала он должен прочесть функцию, и лишь затем — вызов этой функции.
Полезные подробности
Количество шагов, дистанция в километрах и число сожжённых калорий рассчитывается за период с начала текущих суток (с 0:00:00) до момента времени, полученного в новом пакете данных. На следующие сутки все данные обнуляются и расчёты начинаются заново, с нуля.
В функциях check_correct_data(data) и check_correct_time(time) пригодятся знания о ветвлении и логических операторах.
В функции get_step_day(steps) понадобится перебрать последовательность циклом или через list comprehensions; функция должна вернуть общее количество шагов за текущие сутки.
В функции get_distance(steps) пересчитайте шаги в километры. Это арифметика, серьёзное дело. Функция должна вернуть дистанцию в километрах.
Функция get_spent_calories(dist, current_time) должна вычислять и возвращать количество килокалорий, истраченных за текущие сутки. Этот расчёт вы уже выполняли, перенесите свой код в эту функцию.
В функцию get_achievement(dist) перенесите код, предназначенный для выбора мотивирующего сообщения.
if dist >= 6.5:
    achievement = 'Отличный результат! Цель достигнута.'
elif dist >= 3.9:
    achievement = 'Неплохо! День был продуктивным.'
elif dist >= 2:
    achievement = 'Маловато, но завтра наверстаем!'
else:
    achievement = 'Лежать тоже полезно. Главное — участие, а не победа!' 
Измените код так, чтобы функция не печатала сообщение, а возвращала его.